# 1
[[challenge]]
question = """
Get all information of students.

Hint: Use SELECT to select data from a database
      Use FROM to specify which table to select or delete data from.
      Return all students' information.
"""
schema = """
CREATE TABLE students (
    id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER
);

INSERT INTO students (id, name, age) VALUES
(1, 'Alice', 20),
(2, 'Bob', 22),
(3, 'Carol', 19),
(4, 'Dave', 21),
(5, 'Eve', 23),
(6, 'Frank', 20),
(7, 'Grace', 22),
(8, 'Heidi', 19),
(9, 'Ivan', 21),
(10, 'Judy', 23),
(11, 'Kathy', 20),
(12, 'Leo', 22),
(13, 'Mona', 19),
(14, 'Nina', 21),
(15, 'Oscar', 23),
(16, 'Paul', 20),
(17, 'Quinn', 22),
(18, 'Rita', 19),
(19, 'Steve', 21),
(20, 'Trudy', 23);
"""
answer = "SELECT * FROM students"

# 2
[[challenge]]
question = """
Retrieve all products priced above $500.

Hint: Use the WHERE clause to specify a condition.
      Use the greater than operator (>) for numeric comparisons.
"""
schema = """
CREATE TABLE products (
    id INTEGER PRIMARY KEY,
    name TEXT,
    price REAL
);

INSERT INTO products (id, name, price) VALUES
(1, 'Laptop', 1200.50),
(2, 'Phone', 799.99),
(3, 'Tablet', 499.99),
(4, 'Monitor', 199.99),
(5, 'Keyboard', 49.99),
(6, 'Mouse', 29.99),
(7, 'Headphones', 99.99),
(8, 'Charger', 19.99),
(9, 'Speaker', 149.99),
(10, 'Camera', 699.99),
(11, 'TV', 1499.99),
(12, 'Microwave', 399.99),
(13, 'Fridge', 1099.99),
(14, 'Oven', 899.99),
(15, 'Washer', 799.99),
(16, 'Dryer', 699.99),
(17, 'Vacuum', 499.99),
(18, 'Air Conditioner', 1199.99),
(19, 'Heater', 249.99),
(20, 'Fan', 129.99);
"""
answer = "SELECT * FROM products WHERE price > 500"

# 3
[[challenge]]
question = """
List all books sorted by the number of pages in ascending order.

Hint: To sort results, use the ORDER BY clause.
      Add ASC (ascending) or DESC (descending) to specify the order.
"""
schema = """
CREATE TABLE books (
    id INTEGER PRIMARY KEY,
    title TEXT,
    pages INTEGER
);

INSERT INTO books (id, title, pages) VALUES
(1, 'Book A', 200),
(2, 'Book B', 150),
(3, 'Book C', 300),
(4, 'Book D', 400),
(5, 'Book E', 100),
(6, 'Book F', 250),
(7, 'Book G', 500),
(8, 'Book H', 600),
(9, 'Book I', 350),
(10, 'Book J', 450),
(11, 'Book K', 275),
(12, 'Book L', 325),
(13, 'Book M', 200),
(14, 'Book N', 150),
(15, 'Book O', 125),
(16, 'Book P', 180),
(17, 'Book Q', 220),
(18, 'Book R', 410),
(19, 'Book S', 490),
(20, 'Book T', 540);
"""
answer = "SELECT * FROM books ORDER BY pages ASC"

# 4
[[challenge]]
question = """
Count the total number of cities.

Hint: Use the COUNT() function to count the number of rows in the table.
      Return total_cities.
"""
schema = """
CREATE TABLE cities (
    id INTEGER PRIMARY KEY,
    name TEXT,
    population INTEGER
);

INSERT INTO cities (id, name, population) VALUES
(1, 'City A', 500000),
(2, 'City B', 1200000),
(3, 'City C', 800000),
(4, 'City D', 300000),
(5, 'City E', 1000000),
(6, 'City F', 900000),
(7, 'City G', 700000),
(8, 'City H', 600000),
(9, 'City I', 1100000),
(10, 'City J', 400000),
(11, 'City K', 750000),
(12, 'City L', 850000),
(13, 'City M', 950000),
(14, 'City N', 1050000),
(15, 'City O', 1150000),
(16, 'City P', 1250000),
(17, 'City Q', 450000),
(18, 'City R', 550000),
(19, 'City S', 650000),
(20, 'City T', 1500000);
"""
answer = "SELECT COUNT(*) AS total_cities FROM cities"

# 5
[[challenge]]
question = """
Find the total sales amount.

Hint: The SUM() function calculates the total of a numeric column.
      Use it in the SELECT clause.
      Return total_sales.
"""
schema = """
CREATE TABLE sales (
    id INTEGER PRIMARY KEY,
    product TEXT,
    amount INTEGER
);

INSERT INTO sales (id, product, amount) VALUES
(1, 'Product A', 100),
(2, 'Product B', 200),
(3, 'Product C', 300),
(4, 'Product D', 400),
(5, 'Product E', 500),
(6, 'Product F', 150),
(7, 'Product G', 250),
(8, 'Product H', 350),
(9, 'Product I', 450),
(10, 'Product J', 550),
(11, 'Product K', 600),
(12, 'Product L', 700),
(13, 'Product M', 800),
(14, 'Product N', 900),
(15, 'Product O', 1000),
(16, 'Product P', 1100),
(17, 'Product Q', 1200),
(18, 'Product R', 1300),
(19, 'Product S', 1400),
(20, 'Product T', 1500);
"""
answer = "SELECT SUM(amount) AS total_sales FROM sales"

# 6
[[challenge]]
question = """
Retrieve the distinct statuses in the orders table.

Hint: Use DISTINCT in the SELECT clause to eliminate duplicate values in a specific column.
"""
schema = """
CREATE TABLE orders (
    id INTEGER PRIMARY KEY,
    customer TEXT,
    status TEXT
);

INSERT INTO orders (id, customer, status) VALUES
(1, 'Alice', 'Shipped'),
(2, 'Bob', 'Pending'),
(3, 'Alice', 'Pending'),
(4, 'Carol', 'Shipped'),
(5, 'Dave', 'Cancelled'),
(6, 'Eve', 'Shipped'),
(7, 'Frank', 'Pending'),
(8, 'Grace', 'Shipped'),
(9, 'Heidi', 'Pending'),
(10, 'Ivan', 'Cancelled'),
(11, 'Judy', 'Pending'),
(12, 'Kathy', 'Shipped'),
(13, 'Leo', 'Cancelled'),
(14, 'Mona', 'Shipped'),
(15, 'Nina', 'Pending'),
(16, 'Oscar', 'Shipped'),
(17, 'Paul', 'Cancelled'),
(18, 'Quinn', 'Pending'),
(19, 'Rita', 'Shipped'),
(20, 'Steve', 'Cancelled');
"""
answer = "SELECT DISTINCT status FROM orders"

# 7
[[challenge]]
question = """
Find the total salary for each department.

Hint: Use the GROUP BY clause to group rows by a specific column and aggregate values using functions like SUM().
      Return total_salary.
"""
schema = """
CREATE TABLE employees (
    id INTEGER PRIMARY KEY,
    department TEXT,
    salary INTEGER
);

INSERT INTO employees (id, department, salary) VALUES
(1, 'HR', 50000),
(2, 'Engineering', 80000),
(3, 'HR', 60000),
(4, 'Engineering', 90000),
(5, 'Sales', 55000),
(6, 'HR', 70000),
(7, 'Engineering', 85000),
(8, 'Sales', 60000),
(9, 'Engineering', 95000),
(10, 'Sales', 75000),
(11, 'HR', 72000),
(12, 'Engineering', 100000),
(13, 'Sales', 65000),
(14, 'HR', 58000),
(15, 'Engineering', 87000),
(16, 'Sales', 77000),
(17, 'HR', 69000),
(18, 'Engineering', 93000),
(19, 'Sales', 70000),
(20, 'HR', 61000);
"""
answer = """
SELECT department, SUM(salary) AS total_salary 
FROM employees 
GROUP BY department
"""

# 8
[[challenge]]
question = """
Find categories where the total amount exceeds $200.

Hint: After grouping data with GROUP BY, use the HAVING clause to filter aggregated results.
      Return category, total_amount.
"""
schema = """
CREATE TABLE transactions (
    id INTEGER PRIMARY KEY,
    category TEXT,
    amount INTEGER
);

INSERT INTO transactions (id, category, amount) VALUES
(1, 'Food', 50),
(2, 'Transport', 30),
(3, 'Food', 70),
(4, 'Shopping', 150),
(5, 'Transport', 40),
(6, 'Food', 80),
(7, 'Transport', 25),
(8, 'Shopping', 200),
(9, 'Food', 90),
(10, 'Transport', 35),
(11, 'Food', 100),
(12, 'Transport', 45),
(13, 'Shopping', 180),
(14, 'Food', 120),
(15, 'Transport', 50),
(16, 'Shopping', 220),
(17, 'Food', 110),
(18, 'Transport', 40),
(19, 'Shopping', 170),
(20, 'Food', 130);
"""
answer = """
SELECT category, SUM(amount) AS total_amount 
FROM transactions 
GROUP BY category 
HAVING SUM(amount) > 200
"""

# 9
[[challenge]]
question = """
Retrieve movies with a rating above the average rating.

Hint: A subquery is a query inside another query.
      Use it with aggregate functions like AVG() to compute intermediate results.
"""
schema = """
CREATE TABLE movies (
    id INTEGER PRIMARY KEY,
    title TEXT,
    rating REAL
);

INSERT INTO movies (id, title, rating) VALUES
(1, 'Movie A', 8.5),
(2, 'Movie B', 7.2),
(3, 'Movie C', 9.0),
(4, 'Movie D', 6.5),
(5, 'Movie E', 8.0),
(6, 'Movie F', 7.8),
(7, 'Movie G', 8.3),
(8, 'Movie H', 7.5),
(9, 'Movie I', 8.6),
(10, 'Movie J', 9.1),
(11, 'Movie K', 8.7),
(12, 'Movie L', 6.8),
(13, 'Movie M', 7.9),
(14, 'Movie N', 8.2),
(15, 'Movie O', 6.9),
(16, 'Movie P', 8.8),
(17, 'Movie Q', 7.4),
(18, 'Movie R', 9.2),
(19, 'Movie S', 8.4),
(20, 'Movie T', 7.3);
"""
answer = """
SELECT *
FROM movies
WHERE rating > (SELECT AVG(rating) FROM movies)
"""

# 10
[[challenge]]
question = """
Retrieve article titles along with their authors' names.

Hint: Use the JOIN clause to combine rows from two tables.
      Match them using a common column (e.g., author_id).
"""
schema = """
CREATE TABLE authors (
    id INTEGER PRIMARY KEY,
    name TEXT
);

CREATE TABLE articles (
    id INTEGER PRIMARY KEY,
    title TEXT,
    author_id INTEGER
);

INSERT INTO authors (id, name) VALUES
(1, 'Author A'),
(2, 'Author B'),
(3, 'Author C'),
(4, 'Author D'),
(5, 'Author E'),
(6, 'Author F'),
(7, 'Author G'),
(8, 'Author H'),
(9, 'Author I'),
(10, 'Author J'),
(11, 'Author K'),
(12, 'Author L'),
(13, 'Author M'),
(14, 'Author N'),
(15, 'Author O'),
(16, 'Author P'),
(17, 'Author Q'),
(18, 'Author R'),
(19, 'Author S'),
(20, 'Author T');

INSERT INTO articles (id, title, author_id) VALUES
(1, 'Article 1', 1),
(2, 'Article 2', 2),
(3, 'Article 3', 3),
(4, 'Article 4', 4),
(5, 'Article 5', 5),
(6, 'Article 6', 6),
(7, 'Article 7', 7),
(8, 'Article 8', 8),
(9, 'Article 9', 9),
(10, 'Article 10', 10),
(11, 'Article 11', 11),
(12, 'Article 12', 12),
(13, 'Article 13', 13),
(14, 'Article 14', 14),
(15, 'Article 15', 15),
(16, 'Article 16', 16),
(17, 'Article 17', 17),
(18, 'Article 18', 18),
(19, 'Article 19', 19),
(20, 'Article 20', 20);
"""
answer = """
SELECT a.title, au.name 
FROM articles a 
JOIN authors au ON a.author_id = au.id
"""
